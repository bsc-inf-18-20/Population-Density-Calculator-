# # -*- coding: utf-8 -*-
# """
# /***************************************************************************
#  population_density_analysis
#                                  A QGIS plugin
#  automet the calculation process of density population
#  Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
#                               -------------------
#         begin                : 2024-11-30
#         git sha              : $Format:%H$
#         copyright            : (C) 2024 by water
#         email                : kaundalyson97@gmail.com
#  ***************************************************************************/

# /***************************************************************************
#  *                                                                         *
#  *   This program is free software; you can redistribute it and/or modify  *
#  *   it under the terms of the GNU General Public License as published by  *
#  *   the Free Software Foundation; either version 2 of the License, or     *
#  *   (at your option) any later version.                                   *
#  *                                                                         *
#  ***************************************************************************/
# """
# from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
# from qgis.PyQt.QtGui import QIcon
# from qgis.PyQt.QtWidgets import QAction

# # Initialize Qt resources from file resources.py
# from .resources import *
# # Import the code for the dialog
# from .population_density_analysis_dialog import population_density_analysisDialog
# import os.path


# class population_density_analysis:
#     """QGIS Plugin Implementation."""

#     def __init__(self, iface):
#         """Constructor.

#         :param iface: An interface instance that will be passed to this class
#             which provides the hook by which you can manipulate the QGIS
#             application at run time.
#         :type iface: QgsInterface
#         """
#         # Save reference to the QGIS interface
#         self.iface = iface
#         # initialize plugin directory
#         self.plugin_dir = os.path.dirname(__file__)
#         # initialize locale
#         locale = QSettings().value('locale/userLocale')[0:2]
#         locale_path = os.path.join(
#             self.plugin_dir,
#             'i18n',
#             'population_density_analysis_{}.qm'.format(locale))

#         if os.path.exists(locale_path):
#             self.translator = QTranslator()
#             self.translator.load(locale_path)
#             QCoreApplication.installTranslator(self.translator)

#         # Declare instance attributes
#         self.actions = []
#         self.menu = self.tr(u'&population_density_analysis')

#         # Check if plugin was started the first time in current QGIS session
#         # Must be set in initGui() to survive plugin reloads
#         self.first_start = None

#     # noinspection PyMethodMayBeStatic
#     def tr(self, message):
#         """Get the translation for a string using Qt translation API.

#         We implement this ourselves since we do not inherit QObject.

#         :param message: String for translation.
#         :type message: str, QString

#         :returns: Translated version of message.
#         :rtype: QString
#         """
#         # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
#         return QCoreApplication.translate('population_density_analysis', message)


#     def add_action(
#         self,
#         icon_path,
#         text,
#         callback,
#         enabled_flag=True,
#         add_to_menu=True,
#         add_to_toolbar=True,
#         status_tip=None,
#         whats_this=None,
#         parent=None):
#         """Add a toolbar icon to the toolbar.

#         :param icon_path: Path to the icon for this action. Can be a resource
#             path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
#         :type icon_path: str

#         :param text: Text that should be shown in menu items for this action.
#         :type text: str

#         :param callback: Function to be called when the action is triggered.
#         :type callback: function

#         :param enabled_flag: A flag indicating if the action should be enabled
#             by default. Defaults to True.
#         :type enabled_flag: bool

#         :param add_to_menu: Flag indicating whether the action should also
#             be added to the menu. Defaults to True.
#         :type add_to_menu: bool

#         :param add_to_toolbar: Flag indicating whether the action should also
#             be added to the toolbar. Defaults to True.
#         :type add_to_toolbar: bool

#         :param status_tip: Optional text to show in a popup when mouse pointer
#             hovers over the action.
#         :type status_tip: str

#         :param parent: Parent widget for the new action. Defaults None.
#         :type parent: QWidget

#         :param whats_this: Optional text to show in the status bar when the
#             mouse pointer hovers over the action.

#         :returns: The action that was created. Note that the action is also
#             added to self.actions list.
#         :rtype: QAction
#         """

#         icon = QIcon(icon_path)
#         action = QAction(icon, text, parent)
#         action.triggered.connect(callback)
#         action.setEnabled(enabled_flag)

#         if status_tip is not None:
#             action.setStatusTip(status_tip)

#         if whats_this is not None:
#             action.setWhatsThis(whats_this)

#         if add_to_toolbar:
#             # Adds plugin icon to Plugins toolbar
#             self.iface.addToolBarIcon(action)

#         if add_to_menu:
#             self.iface.addPluginToMenu(
#                 self.menu,
#                 action)

#         self.actions.append(action)

#         return action

#     def initGui(self):
#         """Create the menu entries and toolbar icons inside the QGIS GUI."""

#         icon_path = ':/plugins/population_density_analysis/icon.png'
#         self.add_action(
#             icon_path,
#             text=self.tr(u'population_density_analysis'),
#             callback=self.run,
#             parent=self.iface.mainWindow())

#         # will be set False in run()
#         self.first_start = True


#     def unload(self):
#         """Removes the plugin menu item and icon from QGIS GUI."""
#         for action in self.actions:
#             self.iface.removePluginMenu(
#                 self.tr(u'&population_density_analysis'),
#                 action)
#             self.iface.removeToolBarIcon(action)


#     def run(self):
#         """Run method that performs all the real work"""

#         # Create the dialog with elements (after translation) and keep reference
#         # Only create GUI ONCE in callback, so that it will only load when the plugin is started
#         if self.first_start == True:
#             self.first_start = False
#             self.dlg = population_density_analysisDialog()

#         # show the dialog
#         self.dlg.show()
#         # Run the dialog event loop
#         result = self.dlg.exec_()
#         # See if OK was pressed
#         if result:
#             # Do something useful here - delete the line containing pass and
#             # substitute with your code.
#             pass




# # -*- coding: utf-8 -*-
import os
from qgis.PyQt.QtCore import QCoreApplication, QSettings, QTranslator
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsDataSourceUri, QgsVectorLayer
from .population_density_analysis_dialog import PopulationDensityAnalysisDialog


class PopulationDensityAnalysis:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor."""
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        self.dlg = None

        # Localization
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(self.plugin_dir, 'i18n', f'population_density_analysis_{locale}.qm')
        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

    def tr(self, message):
        """Translate a message."""
        return QCoreApplication.translate('PopulationDensityAnalysis', message)

    def add_action(self, icon_path, text, callback, parent=None):
        """Add an action to the plugin."""
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        self.iface.addToolBarIcon(action)
        self.iface.addPluginToMenu(self.tr('&Population Density Analysis'), action)
        return action

    def initGui(self):
        """Create menu entries and toolbar icons."""
        icon_path = ':/plugins/population_density_analysis/icon.png'
        self.add_action(icon_path, text=self.tr('Population Density Analysis'), callback=self.run)

    def unload(self):
        """Remove plugin menu items."""
        self.iface.removePluginMenu(self.tr('&Population Density Analysis'), self.dlg)
        self.iface.removeToolBarIcon(self.dlg)

    def run(self):
        """Run the plugin."""
        if not self.dlg:
            self.dlg = PopulationDensityAnalysisDialog()

            # Connect buttons to methods
            self.dlg.pushButton.clicked.connect(self.populate_layers)
            self.dlg.pushButton_2.clicked.connect(self.populate_districts)
            self.dlg.pushButton_5.clicked.connect(self.calculate_density)

        self.dlg.show()
        result = self.dlg.exec_()
        if result:
            pass

    def connect_to_db(self):
        """Establish a database connection."""
        uri = QgsDataSourceUri()
        uri.setConnection('localhost', '5432', 'population_density_calculator', 'postgres', '1234')  # Update credentials
        return uri

    def populate_layers(self):
        """Populate layers in the combo box."""
        layers = [layer.name() for layer in self.iface.mapCanvas().layers()]
        self.dlg.layerComboBox.clear()
        self.dlg.layerComboBox.addItems(layers)

    def populate_districts(self):
        """Fetch and display available districts."""
        selected_layer = self.dlg.layerComboBox.currentText()
        if not selected_layer:
            self.iface.messageBar().pushMessage("Error", "Please select a layer first.", level=3)
            return

        query = f"SELECT DISTINCT DIST_NAME FROM {selected_layer};"
        uri = self.connect_to_db()
        uri.setDataSource("", f"({query})", "geom")  # Adjust geometry column as needed
        layer = QgsVectorLayer(uri.uri(), "Districts", "postgres")
        if layer.isValid():
            self.dlg.districtComboBox.clear()
            features = layer.getFeatures()
            self.dlg.districtComboBox.addItems([feature['DIST_NAME'] for feature in features])
        else:
            self.iface.messageBar().pushMessage("Error", "Failed to load districts from the database.", level=3)

    def calculate_density(self):
        """Calculate population density."""
        selected_layer = self.dlg.layerComboBox.currentText()
        selected_district = self.dlg.districtComboBox.currentText()

        if not selected_layer or not selected_district:
            self.iface.messageBar().pushMessage("Error", "Please select a layer and a district.", level=3)
            return

        query = f"""
        SELECT SUM(TOTAL_POP) / SUM(ST_Area(geom)) AS density
        FROM {selected_layer}
        WHERE DIST_NAME = '{selected_district}';
        """
        uri = self.connect_to_db()
        uri.setDataSource("", f"({query})", "geom")  # Adjust geometry column as needed
        layer = QgsVectorLayer(uri.uri(), "Population Density", "postgres")
        if layer.isValid():
            features = layer.getFeatures()
            for feature in features:
                density = feature['density']
                self.dlg.outputLabel.setText(f"Population Density: {density:.2f}")
                break
        else:
            self.iface.messageBar().pushMessage("Error", "Failed to calculate population density.", level=3)
